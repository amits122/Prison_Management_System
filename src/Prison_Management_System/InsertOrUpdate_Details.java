/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Prison_Management_System;
import static Prison_Management_System.Login.username;
import java.sql.DriverManager;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author amits
 */
public class InsertOrUpdate_Details extends javax.swing.JFrame {

    /**
     * Creates new form Insert_Details
     */
    public InsertOrUpdate_Details() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        Court_ID = new javax.swing.JTextField();
        Address = new javax.swing.JTextField();
        Chief_Justice = new javax.swing.JTextField();
        Jury = new javax.swing.JTextField();
        Level = new javax.swing.JTextField();
        Submit_Court = new javax.swing.JButton();
        Update_Court = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Type = new javax.swing.JTextField();
        Court_ID_Case = new javax.swing.JTextField();
        Verdict = new javax.swing.JTextField();
        Verdict_Date = new javax.swing.JTextField();
        Charges = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Submit_Case = new javax.swing.JButton();
        Case_ID = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        Update_Case = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        Prison_ID = new javax.swing.JTextField();
        Prison_Location = new javax.swing.JTextField();
        Jurisdiction = new javax.swing.JTextField();
        Submit_Prison = new javax.swing.JButton();
        Update_Prison = new javax.swing.JButton();
        Blocks = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        No_Of_Cells = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        Staff_Salary = new javax.swing.JTextField();
        Staff_Designation = new javax.swing.JTextField();
        Staff_Address = new javax.swing.JTextField();
        Staff_ID = new javax.swing.JTextField();
        Staff_DoB = new javax.swing.JTextField();
        Submit_Staff = new javax.swing.JButton();
        Staff_Name = new javax.swing.JTextField();
        Update_Staff = new javax.swing.JButton();
        Staff_Shift = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        Inmate_ID = new javax.swing.JTextField();
        Release_Date = new javax.swing.JTextField();
        Alias = new javax.swing.JTextField();
        Inmate_Name = new javax.swing.JTextField();
        Start_Date = new javax.swing.JTextField();
        Inmate_DoB = new javax.swing.JTextField();
        Case_ID_Inmate = new javax.swing.JTextField();
        Prison_ID_Inmate = new javax.swing.JTextField();
        Supervisor_Staff_ID = new javax.swing.JTextField();
        Submit_Inmate = new javax.swing.JButton();
        Update_Inmate = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        Blocks_Inmate = new javax.swing.JTextField();
        Cells_Inmate = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        Job_ID = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Job_Description = new javax.swing.JTextArea();
        Submit_Job_Desc = new javax.swing.JButton();
        Update_Job_Info = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        Job_ID_Feedback = new javax.swing.JTextField();
        Inmate_ID_Feedback = new javax.swing.JTextField();
        Shift = new javax.swing.JTextField();
        Hours_Completed = new javax.swing.JTextField();
        Submit_Job = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Feedback = new javax.swing.JTextArea();
        Update_Job = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));

        jLabel6.setText("Court_ID");

        jLabel9.setText("Address");

        jLabel10.setText("Chief_Justice");

        jLabel11.setText("Level");

        jLabel12.setText("Jury_Members");

        Jury.setToolTipText("(Enter multiple values separated by comma.)");

        Level.setToolTipText("Supreme/High/District/Sessions/Tribunal");

        Submit_Court.setBackground(new java.awt.Color(255, 255, 255));
        Submit_Court.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Submit_Court.setText("Insert");
        Submit_Court.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_CourtActionPerformed(evt);
            }
        });

        Update_Court.setBackground(new java.awt.Color(255, 255, 255));
        Update_Court.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Update_Court.setText("Update");
        Update_Court.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_CourtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Chief_Justice, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(Level, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(Court_ID, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(Address, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(Jury, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(Submit_Court, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Update_Court, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(54, 54, 54))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Court_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(Chief_Justice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(Level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(Jury, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Submit_Court)
                .addGap(18, 18, 18)
                .addComponent(Update_Court)
                .addContainerGap(247, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Court", jPanel2);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        jLabel2.setText("Type");

        jLabel3.setText("Verdict");

        jLabel4.setText("Verdict_Date");

        jLabel5.setText("Court_ID");

        Type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeActionPerformed(evt);
            }
        });

        Verdict_Date.setToolTipText("YYYY-MM-DD");
        Verdict_Date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Verdict_DateActionPerformed(evt);
            }
        });

        Charges.setToolTipText("(Enter multiple values separated by comma.)");
        Charges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChargesActionPerformed(evt);
            }
        });

        jLabel7.setText("Charges");

        Submit_Case.setBackground(new java.awt.Color(255, 255, 255));
        Submit_Case.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Submit_Case.setText("Insert");
        Submit_Case.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_CaseActionPerformed(evt);
            }
        });

        Case_ID.setToolTipText("");
        Case_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Case_IDActionPerformed(evt);
            }
        });

        jLabel13.setText("Case_ID");

        Update_Case.setBackground(new java.awt.Color(255, 255, 255));
        Update_Case.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Update_Case.setText("Update");
        Update_Case.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_CaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel13))
                                .addGap(52, 52, 52)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Type, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(Case_ID, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(Verdict, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(Verdict_Date, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(70, 70, 70)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Charges)
                                    .addComponent(Court_ID_Case, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Update_Case, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Submit_Case, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(64, 64, 64)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(Case_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Verdict, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(Verdict_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Court_ID_Case, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(Charges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addComponent(Submit_Case)
                .addGap(18, 18, 18)
                .addComponent(Update_Case)
                .addContainerGap(210, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Case", jPanel1);

        jPanel4.setBackground(new java.awt.Color(204, 255, 255));

        jLabel23.setText("Prison_ID");

        jLabel24.setText("Location");

        jLabel25.setText("Jurisdiction");

        Prison_ID.setToolTipText("");

        Jurisdiction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JurisdictionActionPerformed(evt);
            }
        });

        Submit_Prison.setBackground(new java.awt.Color(255, 255, 255));
        Submit_Prison.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Submit_Prison.setText("Insert");
        Submit_Prison.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_PrisonActionPerformed(evt);
            }
        });

        Update_Prison.setBackground(new java.awt.Color(255, 255, 255));
        Update_Prison.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Update_Prison.setText("Update");
        Update_Prison.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_PrisonActionPerformed(evt);
            }
        });

        Blocks.setToolTipText("(Enter multiple values separated by comma.)");
        Blocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlocksActionPerformed(evt);
            }
        });

        jLabel48.setText("Blocks");

        jLabel49.setText("No_Of_Cells");

        No_Of_Cells.setToolTipText("(Enter multiple values separated by comma.)");
        No_Of_Cells.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                No_Of_CellsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(jLabel48)
                            .addComponent(jLabel49, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(No_Of_Cells, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(Jurisdiction, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Blocks, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Prison_Location, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(Prison_ID)))
                    .addComponent(Update_Prison, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Submit_Prison, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(Prison_ID))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(Prison_Location))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(Jurisdiction))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(Blocks))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49)
                    .addComponent(No_Of_Cells))
                .addGap(18, 18, 18)
                .addComponent(Submit_Prison)
                .addGap(18, 18, 18)
                .addComponent(Update_Prison)
                .addGap(224, 224, 224))
        );

        Prison_Location.getAccessibleContext().setAccessibleDescription("");
        Jurisdiction.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane1.addTab("Prison", jPanel4);

        jPanel5.setBackground(new java.awt.Color(204, 255, 255));

        jLabel27.setText("Staff_ID");

        jLabel28.setText("Name");

        jLabel29.setText("Date_Of_Birth");

        jLabel30.setText("Designation");

        jLabel31.setText("Address");

        jLabel32.setText("Salary");

        Staff_Salary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Staff_SalaryActionPerformed(evt);
            }
        });

        Staff_Designation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Staff_DesignationActionPerformed(evt);
            }
        });

        Staff_Address.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Staff_AddressActionPerformed(evt);
            }
        });

        Staff_ID.setToolTipText("Ignore on Insertion");
        Staff_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Staff_IDActionPerformed(evt);
            }
        });

        Staff_DoB.setToolTipText("YYYY-MM-DD");
        Staff_DoB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Staff_DoBActionPerformed(evt);
            }
        });

        Submit_Staff.setBackground(new java.awt.Color(255, 255, 255));
        Submit_Staff.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Submit_Staff.setText("Insert");
        Submit_Staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_StaffActionPerformed(evt);
            }
        });

        Staff_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Staff_NameActionPerformed(evt);
            }
        });

        Update_Staff.setBackground(new java.awt.Color(255, 255, 255));
        Update_Staff.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Update_Staff.setText("Update");
        Update_Staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_StaffActionPerformed(evt);
            }
        });

        Staff_Shift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Staff_ShiftActionPerformed(evt);
            }
        });

        jLabel53.setText("Shift");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel28)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel32)
                            .addComponent(jLabel31)
                            .addComponent(jLabel30)
                            .addComponent(jLabel27)
                            .addComponent(jLabel53))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Staff_Designation, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Staff_Address, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Staff_DoB, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Staff_Name, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Staff_Salary)
                            .addComponent(Staff_ID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Staff_Shift)))
                    .addComponent(Update_Staff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Submit_Staff, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(Staff_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(Staff_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(Staff_DoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(Staff_Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(Staff_Designation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(Staff_Salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(Staff_Shift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Submit_Staff)
                .addGap(18, 18, 18)
                .addComponent(Update_Staff)
                .addContainerGap(190, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Staff", jPanel5);

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));

        jLabel14.setText("Inmate_ID");

        jLabel15.setText("Name");

        jLabel16.setText("Alias");

        jLabel17.setText("Date_Of_Birth");

        jLabel18.setText("Start_Date");

        jLabel19.setText("Release Date");

        jLabel20.setText("Case_ID");

        jLabel21.setText("Prison_ID");

        jLabel22.setText("Supervisor_Staff_ID");

        Release_Date.setToolTipText("YYYY-MM-DD");

        Alias.setToolTipText("(Enter multiple values separated by comma.)");

        Inmate_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Inmate_NameActionPerformed(evt);
            }
        });

        Start_Date.setToolTipText("YYYY-MM-DD");
        Start_Date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Start_DateActionPerformed(evt);
            }
        });

        Inmate_DoB.setToolTipText("YYYY-MM-DD");

        Case_ID_Inmate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Case_ID_InmateActionPerformed(evt);
            }
        });

        Submit_Inmate.setBackground(new java.awt.Color(255, 255, 255));
        Submit_Inmate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Submit_Inmate.setText("Insert");
        Submit_Inmate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_InmateActionPerformed(evt);
            }
        });

        Update_Inmate.setBackground(new java.awt.Color(255, 255, 255));
        Update_Inmate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Update_Inmate.setText("Update");
        Update_Inmate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_InmateActionPerformed(evt);
            }
        });

        jLabel50.setText("Cell_No");

        jLabel51.setText("Block");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Submit_Inmate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20)
                            .addComponent(jLabel19)
                            .addComponent(jLabel18)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14)
                            .addComponent(jLabel51)
                            .addComponent(jLabel50))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Blocks_Inmate)
                            .addComponent(Prison_ID_Inmate, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(Case_ID_Inmate)
                            .addComponent(Release_Date)
                            .addComponent(Start_Date)
                            .addComponent(Inmate_DoB)
                            .addComponent(Alias)
                            .addComponent(Inmate_Name)
                            .addComponent(Supervisor_Staff_ID)
                            .addComponent(Cells_Inmate)
                            .addComponent(Inmate_ID)))
                    .addComponent(Update_Inmate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(Inmate_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(Inmate_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(Alias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(Inmate_DoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(Start_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(Release_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(Case_ID_Inmate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(Prison_ID_Inmate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(Supervisor_Staff_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(Blocks_Inmate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(Cells_Inmate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Submit_Inmate)
                .addGap(18, 18, 18)
                .addComponent(Update_Inmate)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Inmate", jPanel3);

        jPanel6.setBackground(new java.awt.Color(204, 255, 255));

        jLabel33.setText("Job_ID");

        jLabel34.setText("Description");

        Job_ID.setToolTipText("Ignore on Insertion");
        Job_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Job_IDActionPerformed(evt);
            }
        });

        Job_Description.setColumns(20);
        Job_Description.setRows(5);
        jScrollPane2.setViewportView(Job_Description);

        Submit_Job_Desc.setBackground(new java.awt.Color(255, 255, 255));
        Submit_Job_Desc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Submit_Job_Desc.setText("Insert");
        Submit_Job_Desc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_Job_DescActionPerformed(evt);
            }
        });

        Update_Job_Info.setBackground(new java.awt.Color(255, 255, 255));
        Update_Job_Info.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Update_Job_Info.setText("Update");
        Update_Job_Info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_Job_InfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33)
                            .addComponent(jLabel34))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Job_ID, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addComponent(Submit_Job_Desc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Update_Job_Info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(Job_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(Submit_Job_Desc)
                .addGap(18, 18, 18)
                .addComponent(Update_Job_Info)
                .addGap(21, 21, 21))
        );

        jTabbedPane1.addTab("Job_Info", jPanel6);

        jPanel8.setBackground(new java.awt.Color(204, 255, 255));

        jLabel41.setText("Job_ID");

        jLabel42.setText("Inmate_ID");

        jLabel43.setText("Shift");

        jLabel44.setText("Hours_Completed");

        jLabel45.setText("Feedback");

        Job_ID_Feedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Job_ID_FeedbackActionPerformed(evt);
            }
        });

        Inmate_ID_Feedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Inmate_ID_FeedbackActionPerformed(evt);
            }
        });

        Shift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShiftActionPerformed(evt);
            }
        });

        Hours_Completed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hours_CompletedActionPerformed(evt);
            }
        });

        Submit_Job.setBackground(new java.awt.Color(255, 255, 255));
        Submit_Job.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Submit_Job.setText("Insert");
        Submit_Job.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_JobActionPerformed(evt);
            }
        });

        Feedback.setColumns(20);
        Feedback.setRows(5);
        jScrollPane3.setViewportView(Feedback);

        Update_Job.setBackground(new java.awt.Color(255, 255, 255));
        Update_Job.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Update_Job.setText("Update");
        Update_Job.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_JobActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Submit_Job, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel45)
                            .addComponent(jLabel44)
                            .addComponent(jLabel43)
                            .addComponent(jLabel42)
                            .addComponent(jLabel41))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Hours_Completed)
                            .addComponent(Shift)
                            .addComponent(Inmate_ID_Feedback)
                            .addComponent(Job_ID_Feedback)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Update_Job, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(Job_ID_Feedback, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(Inmate_ID_Feedback, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(Shift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(Hours_Completed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel45)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Submit_Job)
                .addGap(18, 18, 18)
                .addComponent(Update_Job)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Job", jPanel8);

        jPanel10.setBackground(new java.awt.Color(51, 51, 255));
        jPanel10.setPreferredSize(new java.awt.Dimension(370, 236));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Insert Details");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Prison_Management_System/Images/logout.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Prison_Management_System/Images/back.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(42, 42, 42))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jLabel26)
                    .addComponent(jButton2))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(255, 51, 51));
        jPanel11.setPreferredSize(new java.awt.Dimension(370, 236));

        jLabel47.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(255, 255, 255));
        jLabel47.setText("© Copyright 2017");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(jLabel47)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(jLabel47)
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 436, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Case_ID_InmateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Case_ID_InmateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Case_ID_InmateActionPerformed

    private void JurisdictionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JurisdictionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JurisdictionActionPerformed

    private void Staff_SalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Staff_SalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Staff_SalaryActionPerformed

    private void Staff_DesignationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Staff_DesignationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Staff_DesignationActionPerformed

    private void Staff_AddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Staff_AddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Staff_AddressActionPerformed

    private void Staff_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Staff_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Staff_IDActionPerformed

    private void Staff_DoBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Staff_DoBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Staff_DoBActionPerformed

    private void Job_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Job_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Job_IDActionPerformed

    private void Job_ID_FeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Job_ID_FeedbackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Job_ID_FeedbackActionPerformed

    private void Inmate_ID_FeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Inmate_ID_FeedbackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Inmate_ID_FeedbackActionPerformed

    private void ShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShiftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftActionPerformed

    private void Hours_CompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hours_CompletedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Hours_CompletedActionPerformed

    private void Submit_CourtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_CourtActionPerformed
        try{
            int CourtID = Integer.parseInt(Court_ID.getText());
            String CourtAddress = Address.getText();
            String ChiefJustice = Chief_Justice.getText();
            String CourtLevel = Level.getText().trim();
            String JuryMembers = Jury.getText();
            if(CourtAddress.equals("") || ChiefJustice.equals("") || CourtLevel.equals("") || JuryMembers.equals(""))
                throw new RuntimeException("Fields Empty");
            if(!CourtLevel.toLowerCase().equals("supreme") && !CourtLevel.toLowerCase().equals("high") && !CourtLevel.toLowerCase().equals("tribunal") && !CourtLevel.toLowerCase().equals("district") && !CourtLevel.toLowerCase().equals("sessions"))          
                throw new RuntimeException("Court Level Wrong");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "INSERT INTO COURT VALUES('"+CourtID+"','"+CourtAddress+"','"+ChiefJustice+"','"+CourtLevel+"');";
            stmt.executeUpdate(query);
            String line1 = "Inserted to Court & Jury" + CourtID + ", " + CourtAddress + ", " + ChiefJustice + ", " + CourtLevel + ", " + JuryMembers; 
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            String JuryArr[] = JuryMembers.split(",");
            for(String temp: JuryArr){
                query = "INSERT INTO COURT_JURY VALUES('"+CourtID+"','"+temp.trim()+"');";
                stmt.executeUpdate(query);
            }
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }         
    // TODO add your handling code here:
    }//GEN-LAST:event_Submit_CourtActionPerformed

    private void Start_DateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Start_DateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Start_DateActionPerformed

    private void Staff_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Staff_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Staff_NameActionPerformed

    private void Submit_Job_DescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_Job_DescActionPerformed
        String JobDesc = Job_Description.getText();
        String JobID = Job_ID.getText();
        try{
            if(JobDesc.equals(""))
                throw new RuntimeException("Fields Empty");
            if(!JobID.equals(""))
                throw new RuntimeException("Do not enter Job ID");                
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "INSERT INTO JOB_DESC (Description) VALUES('"+JobDesc+"');";
            stmt.executeUpdate(query);
            String line1 = "Inserted to Job Description" + JobDesc; 
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }
    // TODO add your handling code here:
    }//GEN-LAST:event_Submit_Job_DescActionPerformed

    private void Submit_JobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_JobActionPerformed
        try{
            int JobID = Integer.parseInt(Job_ID_Feedback.getText());
            int InmateID = Integer.parseInt(Inmate_ID_Feedback.getText());
            String WorkShift = Shift.getText();
            int HoursCompleted = Integer.parseInt(Hours_Completed.getText());
            String InmateFeedback = Feedback.getText();
            
            if(!WorkShift.toLowerCase().equals("morning") && !WorkShift.toLowerCase().equals("noon") && !WorkShift.toLowerCase().equals("evening") && !WorkShift.toLowerCase().equals("night"))
                throw new RuntimeException("Shift is wrong");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "INSERT INTO JOB VALUES('"+JobID+"','"+InmateID+"','"+WorkShift+"','"+HoursCompleted+"','"+InmateFeedback+"');";
            stmt.executeUpdate(query);
            String line1 = "Inserted to Job" + JobID + ", " + InmateID + ", " + WorkShift + ", " + HoursCompleted + ", " + InmateFeedback; 
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Submit_JobActionPerformed

    private void Submit_PrisonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_PrisonActionPerformed
        try{
            int PrisonID = Integer.parseInt(Prison_ID.getText());
            String Location = Prison_Location.getText();
            String PrisonJurisdiction = Jurisdiction.getText();
            String BlocksX = Blocks.getText();
            String NoOfCells = No_Of_Cells.getText(); 
            String Block[] = BlocksX.split(",");
            String Cells[] = NoOfCells.split(",");
            if(Location.equals("") || PrisonJurisdiction.equals("") || BlocksX.equals("") || NoOfCells.equals(""))
                throw new RuntimeException("Fields Empty");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            if(Block.length != Cells.length){
                JOptionPane.showMessageDialog(null, "Blocks do not correspont to cell size");
            }
            else{
                String query = "INSERT INTO PRISON VALUES('"+PrisonID+"','"+Location+"','"+PrisonJurisdiction+"');";
                stmt.executeUpdate(query);
                for(int i = 0; i < Block.length; i++){
                    for(int j = 1; j <= Integer.parseInt(Cells[i].trim()); j++){
                        query = "INSERT INTO PRISON_BLOCKS VALUES('"+PrisonID+"','"+Block[i].trim()+"','"+j+"');";
                        System.out.println(query);
                        stmt.executeUpdate(query);
                    }
                }
                String line1 = "Inserted to Prison" + PrisonID + ", " + Location + ", " + PrisonJurisdiction+ ", " + BlocksX+ ", " + NoOfCells;
                String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
                stmt.executeUpdate(logger);            
            }    
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Submit_PrisonActionPerformed

    private void Submit_StaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_StaffActionPerformed
        try{
            String StaffID = Staff_ID.getText();
            String StaffName = Staff_Name.getText();
            String StaffDateOfBirth = Staff_DoB.getText();
            String StaffAddress = Staff_Address.getText();
            String StaffDesignation = Staff_Designation.getText();
            String StaffShift = Staff_Shift.getText();
            int StaffSalary = Integer.parseInt(Staff_Salary.getText());
            if(StaffName.equals("") || StaffDateOfBirth.equals("") || StaffAddress.equals("") || StaffDesignation.equals("") || StaffShift.equals(""))
                throw new RuntimeException("Fields Empty");
            if(!StaffID.equals(""))
                throw new RuntimeException("Do not enter Staff ID");  
            if(!StaffShift.toLowerCase().equals("morning") && !StaffShift.toLowerCase().equals("noon") && !StaffShift.toLowerCase().equals("evening") && !StaffShift.toLowerCase().equals("night"))
                throw new RuntimeException("Shift is wrong");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "INSERT INTO STAFF (Name, Date_Of_Birth, Address, Designation, Shift, Salary) VALUES('"+StaffName+"','"+StaffDateOfBirth+"','"+StaffAddress+"','"+StaffDesignation+"','"+StaffShift+"','"+StaffSalary+"');";
            stmt.executeUpdate(query);
            String line1 = "Inserted to Staff" + StaffName + ", " + StaffDateOfBirth + ", " + StaffAddress + ", " + StaffDesignation + ", " + StaffSalary;
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Submit_StaffActionPerformed

    private void Submit_InmateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_InmateActionPerformed
        try{
            int InmateID = Integer.parseInt(Inmate_ID.getText());
            String InmateName = Inmate_Name.getText();
            String InmateAlias = Alias.getText();
            String InmateDateOfBirth = Inmate_DoB.getText();
            String StartDate = Start_Date.getText();
            String ReleaseDate = Release_Date.getText();
            int InmateCaseID = Integer.parseInt(Case_ID_Inmate.getText());
            int InmatePrisonID = Integer.parseInt(Prison_ID_Inmate.getText());
            String Block = Blocks_Inmate.getText();
            int CellNo = Integer.parseInt(Cells_Inmate.getText());
            int InmateSupervisorID = Integer.parseInt(Supervisor_Staff_ID.getText());
            if(InmateName.equals("") || InmateDateOfBirth.equals("") || InmateAlias.equals("") || StartDate.equals("") || ReleaseDate.equals(""))
                throw new RuntimeException("Fields Empty");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "INSERT INTO INMATE VALUES('"+InmateID+"','"+InmateName+"','"+InmateDateOfBirth+"','"+StartDate+"','"+ReleaseDate+"','"+InmateCaseID+"','"+InmatePrisonID+"','"+Block+"','"+CellNo+"','"+InmateSupervisorID+"');";
            stmt.executeUpdate(query);
            String line1 = "Inserted to Inmate" + InmateID + ", " + InmateName + ", " + InmateAlias + ", " + InmateDateOfBirth + ", " + StartDate + ", " + ReleaseDate + ", " + InmateCaseID + ", " + InmatePrisonID + ", " + Block + ", " + CellNo + ", " + InmateSupervisorID;
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            String Aliases[] = InmateAlias.split(",");
            for(String temp: Aliases){
                query = "INSERT INTO INMATE_ALIAS VALUES('"+InmateID+"','"+temp.trim()+"');";
                stmt.executeUpdate(query);
            }
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }    // TODO add your handling code here:
    }//GEN-LAST:event_Submit_InmateActionPerformed

    private void Update_CourtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_CourtActionPerformed
        try{
            int CourtID = Integer.parseInt(Court_ID.getText());
            String CourtAddress = Address.getText();
            String ChiefJustice = Chief_Justice.getText();
            String CourtLevel = Level.getText();
            String JuryMembers = Jury.getText();
            if(CourtAddress.equals("") || ChiefJustice.equals("") || CourtLevel.equals("") || JuryMembers.equals(""))
                throw new RuntimeException("Fields Empty");
            if(!CourtLevel.toLowerCase().equals("supreme") && !CourtLevel.toLowerCase().equals("high") && !CourtLevel.toLowerCase().equals("tribunal") && !CourtLevel.toLowerCase().equals("district") && !CourtLevel.toLowerCase().equals("sessions"))          
                throw new RuntimeException("Court Level Wrong");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "UPDATE COURT SET Address = '"+CourtAddress+"',Chief_Justice = '"+ChiefJustice+"',Level = '"+CourtLevel+"' WHERE Court_ID = '"+CourtID+"';";
            stmt.executeUpdate(query);
            query = "DELETE FROM COURT_JURY WHERE Court_ID = '"+CourtID+"';";
            stmt.executeUpdate(query);
            String line1 = "Updated Court & Jury" + CourtID + ", " + CourtAddress + ", " + ChiefJustice + ", " + CourtLevel + ", " + JuryMembers; 
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            String JuryArr[] = JuryMembers.split(",");
            for(String temp: JuryArr){
                query = "INSERT INTO COURT_JURY VALUES('"+CourtID+"','"+temp.trim()+"');";
                stmt.executeUpdate(query);
            }
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }            // TODO add your handling code here:
    }//GEN-LAST:event_Update_CourtActionPerformed

    private void Update_PrisonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_PrisonActionPerformed
        try{
            int PrisonID = Integer.parseInt(Prison_ID.getText());
            String Location = Prison_Location.getText();
            String PrisonJurisdiction = Jurisdiction.getText();
            String BlocksX = Blocks.getText();
            String NoOfCells = No_Of_Cells.getText();  
            String Block[] = BlocksX.split(",");
            String Cells[] = NoOfCells.split(",");
            if(Location.equals("") || PrisonJurisdiction.equals("") || BlocksX.equals("") || NoOfCells.equals(""))
                throw new RuntimeException("Fields Empty");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            if(Block.length != Cells.length){
                JOptionPane.showMessageDialog(null, "Blocks do not correspont to cell size");
            }
            else{
                String query = "UPDATE PRISON SET Location = '"+Location+"', Jurisdiction = '"+PrisonJurisdiction+"' WHERE Prison_ID = '"+PrisonID+"';";
                stmt.executeUpdate(query);
                query = "DELETE FROM PRISON_BLOCKS WHERE Prison_ID = '"+PrisonID+"';";
                stmt.executeUpdate(query);
                for(int i = 0; i < Block.length; i++){
                    for(int j = 1; j <= Integer.parseInt(Cells[i].trim()); j++){
                        query = "INSERT INTO PRISON_BLOCKS VALUES('"+PrisonID+"','"+Block[i].trim()+"','"+j+"');";
                        System.out.println(query);
                        stmt.executeUpdate(query);
                    }
                }
                String line1 = "Updated Prison" + PrisonID + ", " + Location + ", " + PrisonJurisdiction+ ", " + BlocksX+ ", " + NoOfCells; 
                String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
                stmt.executeUpdate(logger);
            }
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Update_PrisonActionPerformed

    private void Update_StaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_StaffActionPerformed
        try{
            int StaffID = Integer.parseInt(Staff_ID.getText());
            String StaffName = Staff_Name.getText();
            String StaffDateOfBirth = Staff_DoB.getText();
            String StaffAddress = Staff_Address.getText();
            String StaffDesignation = Staff_Designation.getText();
            String StaffShift = Staff_Shift.getText();
            int StaffSalary = Integer.parseInt(Staff_Salary.getText());
            if(StaffName.equals("") || StaffDateOfBirth.equals("") || StaffAddress.equals("") || StaffDesignation.equals("") || StaffShift.equals(""))
                throw new RuntimeException("Fields Empty");
            if(!StaffShift.toLowerCase().equals("morning") && !StaffShift.toLowerCase().equals("noon") && !StaffShift.toLowerCase().equals("evening") && !StaffShift.toLowerCase().equals("night"))
                throw new RuntimeException("Shift is wrong");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "UPDATE STAFF SET Name = '"+StaffName+"', Date_Of_Birth = '"+StaffDateOfBirth+"', Address = '"+StaffAddress+"', Designation = '"+StaffDesignation+"', Salary = '"+StaffSalary+"' WHERE Staff_ID = '"+StaffID+"';";
            stmt.executeUpdate(query);
            String line1 = "Updated Staff" + StaffID + ", " + StaffName + ", " + StaffDateOfBirth + ", " + StaffAddress + ", " + StaffDesignation + ", " + StaffSalary; 
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Update_StaffActionPerformed

    private void Update_InmateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_InmateActionPerformed
        try{
            int InmateID = Integer.parseInt(Inmate_ID.getText());
            String InmateName = Inmate_Name.getText();
            String InmateAlias = Alias.getText();
            String InmateDateOfBirth = Inmate_DoB.getText();
            String StartDate = Start_Date.getText();
            String ReleaseDate = Release_Date.getText();
            int InmateCaseID = Integer.parseInt(Case_ID_Inmate.getText());
            int InmatePrisonID = Integer.parseInt(Prison_ID_Inmate.getText());
            String Block = Blocks_Inmate.getText();
            int CellNo = Integer.parseInt(Cells_Inmate.getText());
            int InmateSupervisorID = Integer.parseInt(Supervisor_Staff_ID.getText());
            if(InmateName.equals("") || InmateDateOfBirth.equals("") || InmateAlias.equals("") || StartDate.equals("") || ReleaseDate.equals(""))
                throw new RuntimeException("Fields Empty");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "UPDATE INMATE SET Name = '"+InmateName+"', Date_Of_Birth = '"+InmateDateOfBirth+"', Start_Date = '"+StartDate+"', Release_Date = '"+ReleaseDate+"', Case_ID = '"+InmateCaseID+"', Prison_ID = '"+InmatePrisonID+"',Block = '"+Block+"', Cell_Num = '"+CellNo+"', Supervisor_Staff_ID = '"+InmateSupervisorID+"' WHERE Inmate_ID = '"+InmateID+"';";
            stmt.executeUpdate(query);
            String line1 = "Updated Inmate" + InmateID + ", " + InmateName + ", " + InmateAlias + ", " + InmateDateOfBirth + ", " + StartDate + ", " + ReleaseDate + ", " + InmateCaseID + ", " + InmatePrisonID + ", " + Block + ", " + CellNo + ", " + InmateSupervisorID; 
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            query = "DELETE FROM INMATE_ALIAS WHERE INMATE_ID = '"+InmateID+"';";
            stmt.executeUpdate(query);
            String Aliases[] = InmateAlias.split(",");
            for(String temp: Aliases){
                query = "INSERT INTO INMATE_ALIAS VALUES('"+InmateID+"','"+temp.trim()+"');";
                stmt.executeUpdate(query);
            }
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Update_InmateActionPerformed

    private void Update_Job_InfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_Job_InfoActionPerformed
        try{
            int JobID = Integer.parseInt(Job_ID.getText());
            String JobDesc = Job_Description.getText();
            if(JobDesc.equals(""))
                throw new RuntimeException("Fields Empty");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "UPDATE JOB_DESC SET Description = '"+JobDesc+"' WHERE Job_ID = '"+JobID+"';";
            stmt.executeUpdate(query);
            String line1 = "Updated Job Description" + JobDesc + "where Job_ID " + JobID; 
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Update_Job_InfoActionPerformed

    private void Update_JobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_JobActionPerformed
        int JobID = Integer.parseInt(Job_ID_Feedback.getText());
        int InmateID = Integer.parseInt(Inmate_ID_Feedback.getText());
        String WorkShift = Shift.getText();
        int HoursCompleted = Integer.parseInt(Hours_Completed.getText());
        String InmateFeedback = Feedback.getText();
        try{
            if(!WorkShift.toLowerCase().equals("morning") && !WorkShift.toLowerCase().equals("noon") && !WorkShift.toLowerCase().equals("evening") && !WorkShift.toLowerCase().equals("night"))
                throw new RuntimeException("Shift is wrong");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "UPDATE JOB SET Shift = '"+WorkShift+"', Hours_Completed = '"+HoursCompleted+"', Feedback = '"+InmateFeedback+"' WHERE Job_ID = '"+JobID+"' AND Inmate_ID = '"+InmateID+"';";
            stmt.executeUpdate(query);
            String line1 = "Updated Job" + JobID + ", " + InmateID + ", " + WorkShift + ", " + HoursCompleted + ", " + InmateFeedback; 
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Update_JobActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String logger = "INSERT INTO LOG (User, Operation) VALUES('"+username+"',' Logout');";
            stmt.executeUpdate(logger);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        new Login().setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(Login.access == 1)
            new AdministratorHome().setVisible(true);
        else if(Login.access == 2)
            new PrisonManagerHome().setVisible(true);
        else{
            JOptionPane.showMessageDialog(null, "Unstable State. Logging out");
            new Login().setVisible(true);
        }
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void BlocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlocksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BlocksActionPerformed

    private void No_Of_CellsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_No_Of_CellsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_No_Of_CellsActionPerformed

    private void Inmate_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Inmate_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Inmate_NameActionPerformed

    private void Update_CaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_CaseActionPerformed
        try{
            int CaseID = Integer.parseInt(Case_ID.getText());
            String CaseType = Type.getText();
            String CaseVerdict = Verdict.getText();
            String VerdictDate = Verdict_Date.getText();
            int CourtID = Integer.parseInt(Court_ID_Case.getText());
            String CaseCharges = Charges.getText();
            if(CaseType.equals("") || CaseVerdict.equals("") || VerdictDate.equals("") || CaseCharges.equals(""))
                throw new RuntimeException("Fields Empty");
            if(!CaseType.toLowerCase().equals("criminal") && !CaseType.toLowerCase().equals("civil"))
                throw new RuntimeException("Case Type is wrong");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "UPDATE CASES SET Type = '"+CaseType+"', Verdict = '"+CaseVerdict+"', Verdict_Date = '"+VerdictDate+"', Court_ID = '"+CourtID+"' WHERE Case_ID = '"+CaseID+"';";
            stmt.executeUpdate(query);
            query = "DELETE FROM CASE_CHARGES WHERE CASE_ID = '"+CaseID+"';";
            stmt.executeUpdate(query);
            String line1 = "Updated Case & Charges" + CaseID + ", " + CaseType + ", " + CaseVerdict + ", " + VerdictDate + ", " + CourtID + ", " + CaseCharges;
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            String ChargeArr[] = CaseCharges.split(",");
            for(String temp: ChargeArr){
                query = "INSERT INTO CASE_CHARGES VALUES('"+CaseID+"','"+temp.trim()+"');";
                stmt.executeUpdate(query);
            }
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }    // TODO add your handling code here:
    }//GEN-LAST:event_Update_CaseActionPerformed

    private void Case_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Case_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Case_IDActionPerformed

    private void Submit_CaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_CaseActionPerformed
        try{
            int CaseID = Integer.parseInt(Case_ID.getText());
            String CaseType = Type.getText();
            String CaseVerdict = Verdict.getText();
            String VerdictDate = Verdict_Date.getText();
            int CourtID = Integer.parseInt(Court_ID_Case.getText());
            String CaseCharges = Charges.getText();
            if(CaseType.equals("") || CaseVerdict.equals("") || VerdictDate.equals("") || CaseCharges.equals(""))
                throw new RuntimeException("Fields Empty");
            if(!CaseType.toLowerCase().equals("criminal") && !CaseType.toLowerCase().equals("civil"))
                throw new RuntimeException("Case Type is wrong");
            Class.forName("java.sql.DriverManager");
            Connection con = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/pms", "root", "26111996");
            Statement stmt = (Statement)con.createStatement();
            String query = "INSERT INTO CASES VALUES('"+CaseID+"','"+CaseType+"','"+CaseVerdict+"','"+VerdictDate+"','"+CourtID+"');";
            stmt.executeUpdate(query);
            String line1 = "Inserted to Case & Charges" + CaseID + ", " + CaseType + ", " + CaseVerdict + ", " + VerdictDate + ", " + CourtID + ", " + CaseCharges;
            String logger = "INSERT INTO LOG(User, Operation) VALUES('"+Login.username+"','"+line1+"');";
            stmt.executeUpdate(logger);
            String ChargeArr[] = CaseCharges.split(",");
            for(String temp: ChargeArr){
                query = "INSERT INTO CASE_CHARGES VALUES('"+CaseID+"','"+temp.trim()+"');";
                stmt.executeUpdate(query);
            }
            JOptionPane.showMessageDialog(this, "Successful Operation");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getClass().getCanonicalName() +"\n" + e.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_Submit_CaseActionPerformed

    private void ChargesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChargesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChargesActionPerformed

    private void Verdict_DateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Verdict_DateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Verdict_DateActionPerformed

    private void TypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TypeActionPerformed

    private void Staff_ShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Staff_ShiftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Staff_ShiftActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsertOrUpdate_Details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsertOrUpdate_Details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsertOrUpdate_Details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsertOrUpdate_Details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertOrUpdate_Details().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Address;
    private javax.swing.JTextField Alias;
    private javax.swing.JTextField Blocks;
    private javax.swing.JTextField Blocks_Inmate;
    private javax.swing.JTextField Case_ID;
    private javax.swing.JTextField Case_ID_Inmate;
    private javax.swing.JTextField Cells_Inmate;
    private javax.swing.JTextField Charges;
    private javax.swing.JTextField Chief_Justice;
    private javax.swing.JTextField Court_ID;
    private javax.swing.JTextField Court_ID_Case;
    private javax.swing.JTextArea Feedback;
    private javax.swing.JTextField Hours_Completed;
    private javax.swing.JTextField Inmate_DoB;
    private javax.swing.JTextField Inmate_ID;
    private javax.swing.JTextField Inmate_ID_Feedback;
    private javax.swing.JTextField Inmate_Name;
    private javax.swing.JTextArea Job_Description;
    private javax.swing.JTextField Job_ID;
    private javax.swing.JTextField Job_ID_Feedback;
    private javax.swing.JTextField Jurisdiction;
    private javax.swing.JTextField Jury;
    private javax.swing.JTextField Level;
    private javax.swing.JTextField No_Of_Cells;
    private javax.swing.JTextField Prison_ID;
    private javax.swing.JTextField Prison_ID_Inmate;
    private javax.swing.JTextField Prison_Location;
    private javax.swing.JTextField Release_Date;
    private javax.swing.JTextField Shift;
    private javax.swing.JTextField Staff_Address;
    private javax.swing.JTextField Staff_Designation;
    private javax.swing.JTextField Staff_DoB;
    private javax.swing.JTextField Staff_ID;
    private javax.swing.JTextField Staff_Name;
    private javax.swing.JTextField Staff_Salary;
    private javax.swing.JTextField Staff_Shift;
    private javax.swing.JTextField Start_Date;
    private javax.swing.JButton Submit_Case;
    private javax.swing.JButton Submit_Court;
    private javax.swing.JButton Submit_Inmate;
    private javax.swing.JButton Submit_Job;
    private javax.swing.JButton Submit_Job_Desc;
    private javax.swing.JButton Submit_Prison;
    private javax.swing.JButton Submit_Staff;
    private javax.swing.JTextField Supervisor_Staff_ID;
    private javax.swing.JTextField Type;
    private javax.swing.JButton Update_Case;
    private javax.swing.JButton Update_Court;
    private javax.swing.JButton Update_Inmate;
    private javax.swing.JButton Update_Job;
    private javax.swing.JButton Update_Job_Info;
    private javax.swing.JButton Update_Prison;
    private javax.swing.JButton Update_Staff;
    private javax.swing.JTextField Verdict;
    private javax.swing.JTextField Verdict_Date;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
